{"version":3,"sources":["components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["num","showNum","Math","floor","random","length","Welcome","props","handle","setTimeout","document","getElementById","style","display","handleStart","setState","mode","start","handleEasy","game","gameMode","guessLeft","gameLoading","handleMedium","handleHard","handleGuess","sys","key","guess","state","disTouch","touch","gameOver","wrong","realNum","score","correct","handleReplay","handlePlayAgain","welcomeTimer","className","this","id","onLoad","onClick","e","map","margin","disabled","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f5fbc62.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nconst num = [\r\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\r\n]\r\n\r\nlet showNum = num[Math.floor(Math.random() * num.length)]\r\n\r\n\r\nclass Welcome extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            welcomeTimer: \"\",\r\n            start: \"\",\r\n            mode: \"none\",\r\n            game: \"none\",\r\n            gameMode: \"\",\r\n            guess: \"\",\r\n            guessLeft: 0,\r\n            gameOver: \"none\",\r\n            score: 0,\r\n            correct: \"none\",\r\n            touch: \"\",\r\n            wrong: \"none\",\r\n            realNum: showNum,\r\n            disTouch: \"none\",\r\n            gameLoading: \"none\"\r\n        }\r\n    }\r\n\r\nhandle = () => {\r\n\r\n        setTimeout(function () {\r\n            document.getElementById(\"welcome\").style.display = \"none\";\r\n            document.getElementById(\"start\").style.display = \"\";\r\n        }, 5000);\r\n        \r\n    \r\n}\r\n\r\nhandleStart = () => {\r\n    this.setState({\r\n        mode: \"\",\r\n        start: \"none\"\r\n    })\r\n}\r\n\r\nhandleEasy = () => {\r\n    this.setState({\r\n        game: \"\",\r\n        mode: \"none\",\r\n        gameMode: \"easy\",\r\n        guessLeft: 8,\r\n        gameLoading: \"\"\r\n    })\r\n\r\n}\r\n\r\nhandleMedium = () => {\r\n    this.setState({\r\n        game: \"\",\r\n        mode: \"none\",\r\n        gameMode: \"medium\",\r\n        guessLeft: 4\r\n    })\r\n}\r\n\r\nhandleHard = () => {\r\n    this.setState({\r\n        game: \"\",\r\n        mode: \"none\",\r\n        gameMode: \"hard\",\r\n        guessLeft: 2\r\n    })\r\n}\r\n\r\nhandleGuess = (sys, key) => {\r\n    this.setState({\r\n        guess: sys,\r\n        guessLeft: this.state.guessLeft - 1,\r\n        disTouch: \"\",\r\n        touch: this.state.touch + \" \" + sys \r\n        \r\n    })\r\n\r\n    if(this.state.guessLeft === 1 ) {\r\n        this.setState({\r\n            gameOver: \"\",\r\n            game: \"none\",\r\n            wrong: \"none\"\r\n        })\r\n    }\r\n\r\n    if(sys === this.state.realNum){\r\n        this.setState({\r\n            score: this.state.score+1,\r\n            correct: \"\",\r\n            game: \"none\",\r\n            wrong: \"none\"\r\n\r\n        })\r\n    } \r\n    else if(this.state.guessLeft === 1){\r\n        this.setState({\r\n            wrong: \"none\"\r\n        })\r\n    } \r\n    else {\r\n        this.setState({\r\n            wrong: \"\",\r\n            game: \"none\",\r\n            correct: \"none\",\r\n            score: this.state.score\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nhandleReplay = () => {\r\n    showNum = num[Math.floor(Math.random() * num.length)]\r\n    this.setState({\r\n        mode: \"\",\r\n        guessLeft: 0,\r\n        gameOver: \"none\",\r\n        guess: \"\",\r\n        correct: \"none\",\r\n        wrong: \"none\",\r\n        realNum: showNum,\r\n        disTouch: \"none\",\r\n        touch: \"\"\r\n    })\r\n}\r\n\r\nhandlePlayAgain = () => {\r\n    this.setState({\r\n        game: \"\",\r\n        correct: \"none\",\r\n        wrong: \"none\"\r\n\r\n    })\r\n}\r\n\r\n    render(){\r\n\r\n            return (\r\n\r\n                <div className=\"welcome\">\r\n                   \r\n                    <h1 style={{ display: this.state.start}}>Random Number Guessing</h1>\r\n                    <div className=\"flex\" id=\"welcome\" style={{ display: this.state.welcomeTimer }} onLoad={this.handle()}>\r\n                        <div>\r\n                            <h3>\r\n                                Loading\r\n                        </h3>\r\n                        </div>\r\n                        <div className=\"loader\"></div>\r\n                        <div className=\"loader\"></div>\r\n                        <div className=\"loader\"></div>\r\n                    </div>\r\n\r\n                    <div id=\"start\" style={{ display: \"none\" }} onLoad={this.handle()}>\r\n                        <button onClick={(e) => this.handleStart()} style={{ display: this.state.start }}>\r\n                            START GAME\r\n                        </button>\r\n                    </div>\r\n                   \r\n                    <div style={{ display: this.state.mode }}>\r\n                        <h1>Mode</h1>\r\n                        <button onClick={(e) => this.handleEasy()}>\r\n                            EASY\r\n                    </button>\r\n                        <button onClick={(e) => this.handleMedium()}>\r\n                            MEDIUM\r\n                    </button>\r\n                        <button onClick={(e) => this.handleHard()}>\r\n                            HARD\r\n                    </button>\r\n                    </div>\r\n                    <div style={{ display: this.state.gameOver }}>\r\n                        <p>\r\n                            <b>\r\n                                High Score: {this.state.score}\r\n                            </b>\r\n                        </p>\r\n                        <p>Game Over, You used up all your guesses</p>\r\n                        <button onClick={(e) => this.handleReplay()}>PLAY AGAIN</button>\r\n                    </div>\r\n                    <div style={{ display: this.state.correct }}>\r\n                        <p>\r\n                            <b>\r\n                                High Score: {this.state.score}\r\n                            </b>\r\n                        </p>\r\n            <p>You guessed right!!!, Number is {showNum}</p>\r\n                        <button onClick={(e) => this.handleReplay()}>PLAY AGAIN</button>\r\n                    </div>\r\n                    <div style={{ display: this.state.wrong }}>\r\n                        <p>OOPS!!!, You guessed wrong</p>\r\n                        <button onClick={(e) => this.handlePlayAgain()}>KEEP TRYING</button>\r\n                    </div>\r\n                    <div style={{ display: this.state.game}}>\r\n                        {\r\n                            (this.state.gameMode === \"easy\") ?\r\n                            <div>\r\n                            <h1>Easy Mode</h1>\r\n                            {num.map((sys, key) => {\r\n                             if(sys === this.state.guess){\r\n                                    return (\r\n                                        <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"touch\" disabled>\r\n                                            {sys}\r\n                                        </button>\r\n                                    )\r\n                                } else {\r\n                                    \r\n                                    return (\r\n                                        <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"\">\r\n                                            {sys}\r\n                                        </button>\r\n                                    )\r\n                                }\r\n\r\n                            })}\r\n                            <div className=\"board\">\r\n                                High Score: {this.state.score}\r\n                                <br/>\r\n                                Guesses Left: {this.state.guessLeft}\r\n                            </div>\r\n                                    {\r\n                                        (this.state.guess !== \"\") ?\r\n                                            <div style={{ display: this.state.disTouch }}>\r\n                                                <p>\r\n\r\n                                                    Your Guesses: {this.state.touch}\r\n                                                </p>\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                <br />\r\n                                            </div>\r\n                                    } \r\n                            RULE:::\r\n                            <br/>\r\n                            You have eight guesses to make\r\n                            <br/>\r\n                            You keep guessesing till you are right\r\n                            <br />\r\n                            There is a random number I have choosen above; See if you get it by clicking\r\n                            <br />\r\n                            If you guess right, you win else I win.\r\n                            </div>\r\n                             : \r\n                            (this.state.gameMode === \"medium\") ?\r\n                             <div>\r\n                                <h1>Medium Mode</h1>\r\n                                    {num.map((sys, key) => {\r\n                                    if (sys === this.state.guess) {\r\n                                        return (\r\n                                                    <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"touch\" disabled>\r\n                                                        {sys}\r\n                                                    </button>\r\n                                                )\r\n                                            } else {\r\n\r\n                                                return (\r\n                                                    <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"\">\r\n                                                        {sys}\r\n                                                    </button>\r\n                                                )\r\n                                            }\r\n\r\n                                        })}\r\n                                        <div className=\"board\">\r\n                                            High Score: {this.state.score}\r\n                                            <br />\r\n                                Guesses Left: {this.state.guessLeft}\r\n                                        </div>\r\n                                        {\r\n                                            (this.state.guess !== \"\") ?\r\n                                                <div style={{ display: this.state.disTouch }}>\r\n                                                    <p>\r\n\r\n                                                        Your Guesses: {this.state.touch}\r\n                                                    </p>\r\n                                                </div>\r\n                                                :\r\n                                                <div>\r\n                                                    <br />\r\n                                                </div>\r\n                                        } \r\n                            RULE:::\r\n                            <br />\r\n                            You have four guesses to make\r\n                            <br />\r\n                            You keep guessesing till you are right\r\n                            <br />\r\n                            There is a random number I have choosen above; See if you get it by clicking\r\n                            <br />\r\n                            If you guess right, you win else I win.\r\n                            </div> :\r\n                            (this.state.gameMode === \"hard\") ?\r\n                                        <div>\r\n                                            <h1>Hard Mode</h1>\r\n                                            {num.map((sys, key) => {\r\n                                                if (sys === this.state.guess) {\r\n                                                    return (\r\n                                                        <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"touch\" disabled>\r\n                                                            {sys}\r\n                                                        </button>\r\n                                                    )\r\n                                                } else {\r\n\r\n                                                    return (\r\n                                                        <button style={{ margin: \"2px\" }} key={key} onClick={(e) => this.handleGuess(sys, key)} className=\"\">\r\n                                                            {sys}\r\n                                                        </button>\r\n                                                    )\r\n                                                }\r\n\r\n                                            })}\r\n                                            <div className=\"board\">\r\n                                                High Score: {this.state.score}\r\n                                                <br />\r\n                                Guesses Left: {this.state.guessLeft}\r\n                                            </div>\r\n                                            {\r\n                                                (this.state.guess !== \"\") ?\r\n                                            <div style={{ display: this.state.disTouch }}>\r\n                                            <p>\r\n                                    \r\n                                               Your Guesses: {this.state.touch}\r\n                                                    </p>\r\n                                            </div> \r\n                                                    :\r\n                                                    <div>\r\n                                                        <br/>\r\n                                                    </div>\r\n                                            } \r\n                                        \r\n                            RULE:::\r\n                            <br />\r\n                            You have two guesses to make\r\n                            <br />\r\n                            You keep guessesing till you are right\r\n                            <br />\r\n                            There is a random number I have choosen above; See if you get it by clicking\r\n                            <br />\r\n                            If you guess right, you win else I win.\r\n                            </div> :\r\n                            null\r\n                            \r\n                        }\r\n    \r\n                    </div>\r\n\r\n                </div>\r\n            )    \r\n   \r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport default Welcome;","import React, {Component} from \"react\";\nimport \"./styles/style.css\";\nimport Welcome from \"./components/Welcome\";\n\nclass App extends Component {\n\nrender(){\n\n  return(\n    <Welcome />\n  );\n}\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}